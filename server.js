require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");
const cors = require("cors");
const path = require("path");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser");
const Joi = require("joi");
const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
const allowedOrigins = [
  'https://makadamia.onrender.com',
  'https://mobile-site.onrender.com',
  'http://localhost:3000', // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
];
require("dotenv").config();

const corsOptions = {
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Not allowed by CORS'));
    }
  },
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
app.use(cors(corsOptions));
app.use(cookieParser());
app.options('*', cors(corsOptions));
// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const JWT_SECRET = process.env.JWT_SECRET || "ai3ohPh3Aiy9eeThoh8caaM9voh5Aezaenai0Fae2Pahsh2Iexu7Qu/";
const mongoURI = process.env.MONGO_URI || "mongodb://11_ifelephant:ee590bdf579c7404d12fd8cf0990314242d56e62@axs-h.h.filess.io:27018/11_ifelephant";
const REFRESH_SECRET = process.env.REFRESH_SECRET || "J8$GzP1d&KxT^m4YvNcR";
mongoose.connect(mongoURI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  ssl: false, // –í–∫–ª—é—á–µ–Ω–æ SSL
})
  .then(() => console.log("MongoDB connected"))
  .catch((error) => console.error("MongoDB connection error:", error));

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());
const authMiddleware = (req, res, next) => {
    const token = req.headers.authorization?.split(" ")[1];
    console.log(req.headers.authorization);
    if (!token) {
        console.warn("–û—à–∏–±–∫–∞ 401: –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö");
        return res.status(401).json({ message: "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" });
    }

    try {
        console.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω:", token); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const decoded = jwt.verify(token, JWT_SECRET);
        req.user = decoded;
        next();
    } catch (err) {
        console.warn("–û—à–∏–±–∫–∞ 401: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω", err.message);
        return res.status(401).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω" });
    }
};
async function fetchWithAuth(url, options = {}) {
    let accessToken = localStorage.getItem("accessToken");

    if (!accessToken || isTokenExpired(accessToken)) {
        console.log("–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...");
        accessToken = await refreshAccessToken();
    }

    const res = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${accessToken}`
        }
    });

    if (res.status === 401) {
        console.log("–û—à–∏–±–∫–∞ 401: –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        accessToken = await refreshAccessToken();

        return fetch(url, {
            ...options,
            headers: {
                ...options.headers,
                Authorization: `Bearer ${accessToken}`
            }
        });
    }

    return res;
}
// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ–∫–∞ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
function isTokenExpired(token) {
    try {
        const payload = JSON.parse(atob(token.split(".")[1])); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        return payload.exp * 1000 < Date.now(); // –ï—Å–ª–∏ exp –≤ –ø—Ä–æ—à–ª–æ–º ‚Äî —Ç–æ–∫–µ–Ω –∏—Å—Ç—ë–∫
    } catch (e) {
        return true; // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    }
}
async function refreshAccessToken() {
    const res = await fetch("https://makadamia.onrender.com/refresh", {
        method: "POST",
        credentials: "include",
    });

    if (res.ok) {
        const data = await res.json();
        localStorage.setItem("accessToken", data.accessToken);
        console.log("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");
    } else {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥");
        // –û—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        localStorage.removeItem("accessToken");
        window.location.href = "/login.html"; // –ò–ª–∏ —Å–≤–æ—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞
    }
}


// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HTTP –Ω–∞ HTTPS
app.use((req, res, next) => {
    if (process.env.NODE_ENV === "production") {
        console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:", req.headers["x-forwarded-proto"]);
        if (req.headers["x-forwarded-proto"] !== "https") {
            console.log("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ HTTPS...");
            return res.redirect(`https://${req.headers.host}${req.url}`);
        }
    }
    next();
});
const Cart = require("./models/Cart"); // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥–µ–ª—å

app.post('/cart/add', authMiddleware, async (req, res) => {
  try {
    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É' });
    }

    const { productId, quantity } = req.body;
    const userId = req.user.id;

    let cart = await Cart.findOne({ userId });

    if (!cart) {
      cart = new Cart({ userId, items: [] });
    }

    const existingItem = cart.items.find(item => item.productId.toString() === productId);

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ productId, quantity });
    }

    await cart.save();
    res.status(200).json({ message: "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", cart });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –£–∫–∞–∑–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.use(express.static(path.join(__dirname, "public")));

// –°—Ö–µ–º–∞ –∏ –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  name: { type: String, default: "" },
  city: { type: String, default: "" }
});
const User = mongoose.model("User", userSchema);

// –ú–∏–¥–ª–≤–∞—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞

function generateTokens(user) {
    const issuedAt = Math.floor(Date.now() / 1000); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞

    const accessToken = jwt.sign(
        { id: user._id, username: user.username, iat: issuedAt }, 
        JWT_SECRET, 
        { expiresIn: "30m" }
    );

    const refreshToken = jwt.sign(
        { id: user._id, username: user.username, iat: issuedAt }, 
        REFRESH_SECRET, 
        { expiresIn: "7d" }
    );

    return { accessToken, refreshToken };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/register', async (req, res) => {
  const schema = Joi.object({
    username: Joi.string().min(3).max(30).required(),
    password: Joi.string().min(8).required(),
  });

  const { error } = schema.validate(req.body);
  if (error) {
    return res.status(400).json({ message: error.details[0].message });
  }

  const { username, password } = req.body;

  try {
    console.log("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", req.body);
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      return res.status(409).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 12); // –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤
    const newUser = new User({ username, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', error: err.message });
  }
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  if (!user || !(await bcrypt.compare(password, user.password))) {
    return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
  }
  const { accessToken, refreshToken } = generateTokens(user);
  res.cookie('refreshToken', refreshToken, { httpOnly: true, secure: true, sameSite: 'Strict', maxAge: 30 * 24 * 60 * 60 * 1000 });
  res.json({ accessToken });
});
app.post('/refresh', async (req, res) => {
    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω.");
    console.log("üç™ Cookies:", req.cookies);

    const refreshToken = req.cookies.refreshToken;
    if (!refreshToken) {
        console.warn("‚ùå –ù–µ—Ç refresh-—Ç–æ–∫–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 401.");
        return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    jwt.verify(refreshToken, REFRESH_SECRET, async (err, decodedUser) => {
        if (err) {
            console.warn("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh-—Ç–æ–∫–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 403.");
            return res.status(403).json({ message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π refresh-—Ç–æ–∫–µ–Ω" });
        }

        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const user = await User.findById(decodedUser.id);
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        console.log("‚úÖ Refresh-—Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã.");
        const { accessToken, refreshToken: newRefreshToken } = generateTokens(user);

        console.log("üîÑ –ù–æ–≤—ã–π refreshToken:", newRefreshToken);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π refreshToken –≤ –∫—É–∫–∞—Ö
        res.cookie("refreshToken", newRefreshToken, {
            httpOnly: true,
            secure: true,
            sameSite: "Strict",
            maxAge: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
        });

        res.json({ accessToken });
    });
});

async function refreshAccessToken() {
    try {
        const response = await fetch("https://makadamia.onrender.com/refresh", {
            method: "POST",
            credentials: "include", // –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã cookies –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å!
        });

        if (!response.ok) {
            console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥.");
            logout();
            return null;
        }

        const data = await response.json();
        localStorage.setItem("token", data.accessToken); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        return data.accessToken;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
        logout();
        return null;
    }
}
const autoRefreshToken = () => {
    setInterval(async () => {
        console.log("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
        await refreshAccessToken();
    }, 25 * 60 * 1000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞ 25 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
};
app.post('/logout', authMiddleware, (req, res) => {
    res.clearCookie('refreshToken', {
        httpOnly: true,
        secure: true,
        sameSite: 'Strict'
    });

    res.json({ message: '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' });
});
const logout = () => {
  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  localStorage.removeItem('token'); // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–∫–µ–Ω
  localStorage.removeItem('cart'); // —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã

  // –û—á–∏—Å—Ç–∫–∞ sessionStorage (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  sessionStorage.removeItem('cart');

  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  window.location.href = '/login';
};
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
app.post('/refresh-token', (req, res) => {
  const { token: refreshToken } = req.body;

  if (!refreshToken) {
    return res.status(403).json({ message: '–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  try {
    const user = jwt.verify(refreshToken, JWT_SECRET);
    const newAccessToken = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '1h' });
    res.status(200).json({ token: newAccessToken });
  } catch (err) {
    res.status(403).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/private-route', authMiddleware, (req, res) => {
  res.json({ message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.id}` });
});
app.get('/account', authMiddleware, async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select("username name city");
        if (!user) {
            return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
        res.json({ username: user.username, name: user.name, city: user.city });
    } catch (error) {
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});
app.put('/account', authMiddleware, async (req, res) => {
    const { name, city, username, password } = req.body; // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞

    try {
        const user = await User.findById(req.user.id);
        if (!user) {
            return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        if (name) user.name = name;  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        if (city) user.city = city;  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥
        if (username) user.username = username;  // –û–±–Ω–æ–≤–ª—è–µ–º username
        if (password) user.password = await bcrypt.hash(password, 12);  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å

        await user.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        res.json({ message: '–ê–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª—ë–Ω', user });
    } catch (error) {
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞', error: error.message });
    }
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
app.get("/connect", (req, res) => {
  res.send("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å–ø–µ—à–Ω–æ!");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!', error: err.message });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  res.status(404).json({ message: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
});

// –ü–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
