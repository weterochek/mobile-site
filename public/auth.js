// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–æ—Ä–º–∞–º–∏
function showRegister() {
    document.getElementById("registerForm").classList.add("active");
    document.getElementById("loginForm").classList.remove("active");

    document.getElementById("toggleRegister").classList.add("active");
    document.getElementById("toggleLogin").classList.remove("active");
}

function showLogin() {
    document.getElementById("loginForm").classList.add("active");
    document.getElementById("registerForm").classList.remove("active");

    document.getElementById("toggleLogin").classList.add("active");
    document.getElementById("toggleRegister").classList.remove("active");
}

// –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
showLogin();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registerForm = document.querySelector("#registerForm form");
registerForm.addEventListener("submit", async (e) => {
    e.preventDefault(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    const username = document.getElementById("registerUsername").value;
    const password = document.getElementById("registerPassword").value;

    try {
        const response = await fetch("https://mobile-site.onrender.com/register", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, password }),
        });

        const data = await response.json();
        if (response.ok) {
            alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.");
            showLogin(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
        } else {
            alert(data.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
});
// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function refreshAccessToken() {
    try {
        console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...");
        const response = await fetch("https://mobile-site.onrender.com/refresh", {
            method: "POST",
            credentials: "include",
        });

        const data = await response.json();
        if (response.ok) {
            console.log("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!");
            localStorage.setItem("token", data.accessToken);
            localStorage.setItem("sharedAccessToken", data.accessToken);
            window.dispatchEvent(new Event("storage")); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            return data.accessToken;
        } else {
            console.warn("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –í—ã—Ö–æ–¥...");
            logout();
            return null;
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
        logout();
        return null;
    }
}

// –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
setInterval(() => { 
    const token = localStorage.getItem("token"); 
    if (!token) return;

    const exp = getTokenExp(token);
    const now = Math.floor(Date.now() / 1000);

    // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if (exp && (exp - now) < 300) { 
        console.log("üîÑ –¢–æ–∫–µ–Ω —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á—ë—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...");
        refreshAccessToken();
    }
}, 60000);

// –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetchWithAuth
async function fetchWithAuth(url, options = {}) {
    let token = localStorage.getItem("token");

    if (!token) {
        console.warn("‚ùå –ù–µ—Ç accessToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        token = await refreshAccessToken();
        if (!token) return null;
    }

    let response = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${token}`,
        },
    });

    if (response.status === 401) {
        console.warn("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        token = await refreshAccessToken();
        if (!token) return response;

        return fetch(url, {
            ...options,
            headers: { ...options.headers, Authorization: `Bearer ${token}` },
        });
    }

    return response;
}

// –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
function logout() {
    console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");

    fetch("https://mobile-site.onrender.com/logout", { 
        method: "POST", 
        credentials: "include" 
    }).then(() => {
        localStorage.removeItem("token");
        localStorage.removeItem("sharedAccessToken");
        localStorage.removeItem("cart");
        sessionStorage.clear();

        // –û—á–∏—â–∞–µ–º refreshToken
        document.cookie = "refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; max-age=0;";

        window.dispatchEvent(new Event("storage")); // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º logout –Ω–∞ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
        window.location.href = "/login.html";
    }).catch((error) => console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error));
}

// üì¢ –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ localStorage (–¥—Ä—É–≥–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏ —Å–∞–π—Ç—ã)
window.addEventListener("storage", (event) => {
    if (event.key === "sharedAccessToken") {
        const newToken = localStorage.getItem("sharedAccessToken");
        if (newToken) {
            localStorage.setItem("token", newToken);
            console.log("üîÑ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ localStorage:", newToken);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
const loginForm = document.querySelector("#loginForm form");
loginForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const username = document.getElementById("loginUsername").value;
    const password = document.getElementById("loginPassword").value;

    try {
        const response = await fetch("https://mobile-site.onrender.com/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, password }),
            credentials: "include", // –í–∫–ª—é—á–∞–µ–º –∫—É–∫–∏
        });

        const data = await response.json();
        if (response.ok) {
            localStorage.setItem("token", data.accessToken);
            localStorage.setItem("username", username);

            // –†–µ–¥–∏—Ä–µ–∫—Ç –±–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
            window.location.href = "/index.html";
        } else {
            alert(data.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞.");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
});

async function addToCart(productId, quantity) {
    const token = localStorage.getItem("token");

    if (!token) {
        alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.");
        window.location.href = "/login.html";
        return;
    }

    try {
        const response = await fetch("https://mobile-site.onrender.com/cart/add", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`
            },
            body: JSON.stringify({ productId, quantity }),
        });

        const data = await response.json();

        if (response.status === 401) {
            alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.");
            localStorage.removeItem("token"); // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            window.location.href = "/login.html";
            return;
        }

        if (response.ok) {
            alert("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!");
        } else {
            alert(data.message);
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
        alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function refreshAccessToken() {
    try {
        const response = await fetch("https://mobile-site.onrender.com/refresh", {
            method: "POST",
            credentials: "include",
        });

        const data = await response.json();
        if (response.ok) {
            localStorage.setItem("token", data.accessToken);
            return data.accessToken;
        } else {
            logout(); // –ï—Å–ª–∏ refreshToken –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
            return null;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
        logout(); // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—ã—Ö–æ–¥–∏–º
        return null;
    }
}

function logout() {
    fetch("https://mobile-site.onrender.com/logout", { method: "POST", credentials: "include" })
        .then(() => {
            localStorage.removeItem("token"); // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
            localStorage.removeItem("cart");  // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
            sessionStorage.clear(); // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é

            // –û—á–∏—â–∞–µ–º refreshToken
            document.cookie = "refreshToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 UTC; max-age=0;";

            window.location.href = "/login.html"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        })
        .catch((error) => console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error));
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
async function fetchWithAuth(url, options = {}) {
    let token = localStorage.getItem("token");

    let response = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${token}`,
        },
    });

    if (response.status === 401) {
        token = await refreshAccessToken();
        if (!token) return response;

        response = await fetch(url, {
            ...options,
            headers: { ...options.headers, Authorization: `Bearer ${token}` },
        });
    }

    return response;
}

window.addEventListener("storage", (event) => {
    if (event.key === "sharedAccessTokenUpdate") {
        const newToken = localStorage.getItem("sharedAccessToken");
        if (newToken) {
            localStorage.setItem("token", newToken);
            console.log("–¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω —á–µ—Ä–µ–∑ localStorage:", newToken);
        }
    }
});
