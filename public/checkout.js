let cart = {};
let isSubmittingOrder = false;

function getToken() {
    return localStorage.getItem("accessToken");
}

document.addEventListener("DOMContentLoaded", () => {
    const cartItemsContainer = document.getElementById("cartItems");
    const totalAmountElement = document.getElementById("totalAmount");
    const checkoutForm = document.getElementById("checkoutForm");
    const backToShoppingButton = document.getElementById("backToShopping");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
    cart = JSON.parse(localStorage.getItem('cart')) || {};

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    function renderCartItems() {
        cartItemsContainer.innerHTML = '';
        let totalAmount = 0;

        for (const productId in cart) {
            const item = cart[productId];
            const itemElement = document.createElement('div');
            itemElement.className = 'cart-item';
            itemElement.innerHTML = `
                <div class="item-info">${item.name}</div>
                <div class="item-price">${item.price} ‚ÇΩ</div>
                <div class="quantity-controls">
                    <button class="quantity-control decrease-quantity" data-id="${productId}">-</button>
                    <span class="quantity">${item.quantity}</span>
                    <button class="quantity-control increase-quantity" data-id="${productId}" ${item.quantity >= 100 ? 'disabled' : ''}>+</button>
                </div>
            `;
            cartItemsContainer.appendChild(itemElement);
            totalAmount += item.price * item.quantity;
        }

        totalAmountElement.textContent = `–ò—Ç–æ–≥–æ: ${totalAmount} ‚ÇΩ`;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    cartItemsContainer.addEventListener('click', (event) => {
        const target = event.target;
        if (!target.classList.contains('quantity-control')) return;

        const productId = target.dataset.id;
        if (!cart[productId]) return;

        if (target.classList.contains('increase-quantity')) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
            if (cart[productId].quantity < 100) {
                cart[productId].quantity++;
            }
        } else if (target.classList.contains('decrease-quantity')) {
            cart[productId].quantity--;
            if (cart[productId].quantity <= 0) {
                delete cart[productId];
            }
        }

        localStorage.setItem('cart', JSON.stringify(cart));
        renderCartItems();
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserData() {
        const token = getToken();
        if (!token) {
            console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
            return;
        }

        try {
            const response = await fetch("https://mobile-site.onrender.com/account", {
                method: "GET",
                credentials: "include",
                headers: {
                    "Authorization": `Bearer ${token}`,
                    "Content-Type": "application/json"
                }
            });

            if (response.status === 401) {
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
                const refreshResult = await refreshToken();
                if (refreshResult) {
                    // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    const newToken = getToken();
                    const newResponse = await fetch("https://mobile-site.onrender.com/account", {
                        method: "GET",
                        credentials: "include",
                        headers: {
                            "Authorization": `Bearer ${newToken}`,
                            "Content-Type": "application/json"
                        }
                    });
                    if (newResponse.ok) {
                        const userData = await newResponse.json();
                        updateFormWithUserData(userData);
                        return;
                    }
                }
                // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω");
                return;
            }

            if (!response.ok) {
                throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è");
            }

            const userData = await response.json();
            updateFormWithUserData(userData);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:", error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    async function refreshToken() {
        try {
            const response = await fetch("https://mobile-site.onrender.com/refresh", {
                method: "POST",
                credentials: "include"
            });

            if (response.ok) {
                const data = await response.json();
                localStorage.setItem('accessToken', data.accessToken);
                return true;
            }
            return false;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
            return false;
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function updateFormWithUserData(userData) {
        if (userData.name) {
            document.getElementById("customerName").value = userData.name;
        }
        if (userData.city) {
            document.getElementById("customerAddress").value = userData.city;
        }
    }

    // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    if (checkoutForm) {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
        checkoutForm.addEventListener('submit', async function (e) {
            e.preventDefault();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∑–∞–∫–∞–∑
            if (isSubmittingOrder) {
                console.log("–ó–∞–∫–∞–∑ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...");
                return;
            }

            const token = getToken();
            if (!token) {
                alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            const submitButton = checkoutForm.querySelector('button[type="submit"]');
            
            try {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                isSubmittingOrder = true;
                if (submitButton) {
                    submitButton.disabled = true;
                    submitButton.textContent = "–û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑...";
                }

const phoneInput = document.getElementById("customerPhone");
if (!phoneInput || !phoneInput.value.trim()) {
  alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
  return;
}

const orderData = {
  name: document.getElementById("customerName").value,
  address: document.getElementById("customerAddress").value,
  deliveryTime: document.getElementById("deliveryTime").value,
  additionalInfo: document.getElementById("additionalInfo").value,
  phone: phoneInput.value.trim(),
  totalAmount: Object.values(cart).reduce((sum, item) => sum + item.price * item.quantity, 0),
  items: Object.keys(cart).map(productId => ({
    productId: productId,
    quantity: cart[productId].quantity,
    price: cart[productId].price
  }))
};

                const response = await fetch("https://mobile-site.onrender.com/api/order", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${token}`,
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(orderData)
                });

                if (!response.ok) {
                    throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
                }

                const responseData = await response.json();
                alert("üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");

                // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
                cart = {};  // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
                localStorage.removeItem('cart');  // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ localStorage
                renderCartItems();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
                window.location.href = "account.html";  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∞—Å–∏–±–æ

            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
            } finally {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
                isSubmittingOrder = false;
                if (submitButton) {
                    submitButton.disabled = false;
                    submitButton.textContent = "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑";
                }
            }
        });
    }

    // –ö–Ω–æ–ø–∫–∞ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º"
    if (backToShoppingButton) {
        backToShoppingButton.addEventListener('click', () => {
            window.location.href = "index.html";
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    renderCartItems();
    loadUserData();
});
