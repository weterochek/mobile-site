// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let productMap = {};// –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
let cart = JSON.parse(localStorage.getItem('cart')) || {};
let currentPage = 1;
let reviewsPerPage = 5;
let allReviews = [];
let isSubmitting = false;

(() => {
    const userAgent = navigator.userAgent.toLowerCase();
    const currentURL = window.location.href;

    console.log("User-Agent:", userAgent);
    console.log("–¢–µ–∫—É—â–∏–π URL:", currentURL);
    console.log("sessionStorage.redirected:", sessionStorage.getItem("redirected"));

    if (sessionStorage.getItem("redirected")) {
        console.log("–†–µ–¥–∏—Ä–µ–∫—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è, –ø—Ä–µ—Ä—ã–≤–∞–µ–º.");
        return;
    }

    if (userAgent.includes("mobile") && !currentURL.includes("mobile-site.onrender.com")) {
        console.log("üü¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...");
        sessionStorage.setItem("redirected", "true");
        window.location.href = "https://mobile-site.onrender.com";
    } else if (!userAgent.includes("mobile") && !currentURL.includes("makadamia-e0hb.onrender.com")) {
        console.log("üü¢ –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω—É—é –≤–µ—Ä—Å–∏—é...");
        sessionStorage.setItem("redirected", "true");
        window.location.href = "https://makadamia-e0hb.onrender.com";
    } else {
        console.log("üî¥ –£—Å–ª–æ–≤–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
    }
})();

(async () => {
    if (localStorage.getItem("logoutFlag") === "true") {
        console.warn("‚õî Refresh –æ—Ç–º–µ–Ω—ë–Ω: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤—Ä—É—á–Ω—É—é");
        return;
    }

    const token = localStorage.getItem("accessToken");

    if (!token || isTokenExpired(token)) {
        console.log("üîÑ –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ...");
        await refreshAccessToken();
    } else {
        console.log("‚úÖ Access-—Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–µ–Ω, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.");
    }
})();
document.addEventListener("DOMContentLoaded", function () {
    console.log("JS –∑–∞–≥—Ä—É–∂–µ–Ω!");

    const buttons = document.querySelectorAll(".accordion-button");

    buttons.forEach((button, index) => {
        button.addEventListener("click", function () {
            console.log(`–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: ${index}`);

            const content = this.nextElementSibling;

            if (content && content.classList.contains("accordion-content")) {
                const isOpen = content.classList.contains("open");
                console.log(`–û—Ç–∫—Ä—ã—Ç –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç ${index}?`, isOpen);

                if (isOpen) {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    content.classList.remove("open");
                    content.style.maxHeight = null;
                    console.log(`–ó–∞–∫—Ä—ã–≤–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç ${index}`);
                } else {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ
                    document.querySelectorAll(".accordion-content").forEach((el) => {
                        el.classList.remove("open");
                        el.style.maxHeight = null;
                    });

                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –±–ª–æ–∫
                    content.classList.add("open");
                    content.style.maxHeight = content.scrollHeight + "px";
                    console.log(`–û—Ç–∫—Ä—ã–≤–∞—é –∫–æ–Ω—Ç–µ–Ω—Ç ${index}, –≤—ã—Å–æ—Ç–∞: ${content.scrollHeight}px`);
                }
            } else {
                console.log("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        });
    });
});
window.addEventListener("load", () => {
  const path = window.location.pathname.toLowerCase();

  // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
  document.querySelectorAll(".bottom-nav .nav-item img").forEach(img => {
    img.classList.remove("active-icon");
  });

  // –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (path.includes("index.html") || path.includes("cuisine")) {
    document.getElementById("homeIcon")?.classList.add("active-icon");
  } else if (path.includes("review.html")) {
    document.getElementById("reviewsIcon")?.classList.add("active-icon");
  } else if (path.includes("account.html")) {
    document.getElementById("cabinetIcon")?.classList.add("active-icon");
  }
});

document.addEventListener("DOMContentLoaded", () => {
  highlightActiveIcon(); // ‚Üê –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ DOM

  // –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
  const cartButton = document.getElementById("cartButton");
  const cartIcon = document.getElementById("cartIcon");
  const cartDropdown = document.getElementById("cartDropdown");

  console.log("–ö–Ω–æ–ø–∫–∞:", cartButton);
  console.log("–ö–æ—Ä–∑–∏–Ω–∞:", cartDropdown);

  if (cartButton && cartDropdown && cartIcon) {
    cartButton.addEventListener("click", (event) => {
      event.preventDefault();
      event.stopPropagation();

      console.log("–ö–ª–∏–∫ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ");

const isVisible = cartDropdown.style.display === "flex";

if (isVisible) {
  cartDropdown.style.display = "none";
  cartIcon?.classList.remove("active-icon");
  console.log("–ö–æ—Ä–∑–∏–Ω–∞ —Å–∫—Ä—ã—Ç–∞");
} else {
  cartDropdown.style.display = "flex";
  cartIcon?.classList.add("active-icon");
  console.log("–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞–∑–∞–Ω–∞");
}
    });

    document.addEventListener("click", (event) => {
      if (
        !cartDropdown.contains(event.target) &&
        !cartButton.contains(event.target)
      ) {
        cartDropdown.classList.remove("active");
        cartIcon.classList.remove("active-icon");
        console.log("–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã");
      }
    });

    cartDropdown.addEventListener("click", (event) => {
      event.stopPropagation();
    });
  } else {
    console.log("üö´ –ù–µ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤");
  }
});
document.addEventListener("DOMContentLoaded", () => {
  const stars = document.querySelectorAll('#ratingStars i');
  const ratingInput = document.getElementById('starRating');

  stars.forEach((star, index) => {
    star.addEventListener('click', () => {
      const rating = parseInt(star.getAttribute('data-value'));
      ratingInput.value = rating;

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª
      stars.forEach((s, i) => {
        if (i < rating) {
          s.classList.add('selected');
        } else {
          s.classList.remove('selected');
        }
      });
    });
  });
});
function loadCartFromLocalStorage() {
    const storedCart = localStorage.getItem('cart');
    if (storedCart) {
        cart = JSON.parse(storedCart);
    } else {
        cart = {};
    }
    updateCartDisplay();
}
const path = window.location.pathname;

if (path.includes("index.html") || path === "/" || path.includes("national cuisine")) {
  const homeIcon = document.getElementById("homeIcon");
  if (homeIcon) {
    homeIcon.classList.add("active-icon");
  }
}
document.addEventListener("DOMContentLoaded", async () => {
    console.log("üîÑ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM...");

    if (localStorage.getItem("logoutFlag") === "true") {
        console.warn("‚õî DOMContentLoaded: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º");
        return;
    }

    const token = localStorage.getItem("accessToken");
    if (!token || isTokenExpired(token)) {
        console.log("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...");
        await refreshAccessToken();
    }
});

async function loadProductMap() {
    try {
        const response = await fetch('https://mobile-site.onrender.com/api/products');
        const products = await response.json();
        products.forEach(product => {
            productMap[product._id] = { name: product.name, price: product.price };
        });
        console.log("‚úÖ Product Map –∑–∞–≥—Ä—É–∂–µ–Ω:", productMap);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ productMap:", error);
    }
}


console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /refresh");
console.log("–¢–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º:", localStorage.getItem("accessToken"));
window.onload = function () {
    // –í—ã–∑–æ–≤ updateControls –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for (const productId in cart) {
        updateControls(productId);
    }
    updateCartDisplay();
};
document.addEventListener("DOMContentLoaded", function () {
    const cartItems = document.getElementById("cartItems");
    const cartDropdown = document.getElementById("cartDropdown");

    if (cartDropdown) {
        cartDropdown.style.display = "none"; // –£–±–∏—Ä–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cartDropdown.style.flexDirection = "column";
    }
    
    const cartFooter = document.createElement("div");
    cartFooter.id = "cartFooter";
    cartFooter.style.position = "sticky";
    cartFooter.style.bottom = "0";
    cartFooter.style.background = "white";
    cartFooter.style.padding = "10px";
    cartFooter.style.boxShadow = "0 -2px 5px rgba(0, 0, 0, 0.1)";
    cartFooter.style.display = "flex";
    cartFooter.style.justifyContent = "space-between";
    cartFooter.style.alignItems = "center";
    
    const checkoutButton = document.querySelector("button[onclick='goToCheckoutPage()']");
    const clearCartButton = document.getElementById("clear-cart");
    
    if (checkoutButton && clearCartButton) {
        cartFooter.appendChild(checkoutButton);
        cartFooter.appendChild(clearCartButton);
        cartDropdown.appendChild(cartFooter);
    }
});
document.addEventListener("DOMContentLoaded", function () {
    const cartButton = document.getElementById("cartButton");
    const cartDropdown = document.getElementById("cartDropdown");

    if (cartButton && cartDropdown) {
        cartButton.addEventListener("click", function (event) {
            event.preventDefault();
            event.stopPropagation();
            cartDropdown.classList.toggle("active");
            cartDropdown.style.display = cartDropdown.classList.contains("active") ? "block" : "none";
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
        const closeCartButton = document.createElement("span");
        closeCartButton.innerHTML = "‚úñ";
        closeCartButton.style.cursor = "pointer";
        closeCartButton.style.position = "absolute";
        closeCartButton.style.top = "15px";
        closeCartButton.style.right = "15px";
        closeCartButton.style.fontSize = "24px";
        closeCartButton.style.color = "#333";
        closeCartButton.style.zIndex = "1002";
        closeCartButton.addEventListener("click", function (event) {
            event.stopPropagation();
            cartDropdown.classList.remove("active");
            setTimeout(() => {
                cartDropdown.style.display = "none";
            }, 300);
        });

        cartDropdown.prepend(closeCartButton);

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—ã
        cartDropdown.addEventListener("click", function(event) {
            event.stopPropagation();
        });
    }
});

document.addEventListener("DOMContentLoaded", function () {
    if (!localStorage.getItem("cookiesAccepted")) {
        showCookieBanner();
    }
});

function showCookieBanner() {
    const banner = document.createElement("div");
    banner.innerHTML = `
        <div id="cookie-banner" style="position: fixed; bottom: 0; width: 100%; background: black; color: white; padding: 10px; text-align: center; z-index: 1000;">
            <p>–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º cookies –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞. –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∞–∫–∫–∞—É–Ω—Ç–µ –¥–æ–ª—å—à–µ, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –Ω–∏—Ö. 
            <button id="acceptCookies" style="margin-left: 10px;">–ü—Ä–∏–Ω—è—Ç—å</button></p>
        </div>
    `;
    document.body.appendChild(banner);

    document.getElementById("acceptCookies").addEventListener("click", function () {
        localStorage.setItem("cookiesAccepted", "true");
        banner.remove();
    });
}



function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}

function updateControls(productId) {
    const addButton = document.getElementById(`addButton_${productId}`);
    const removeButton = document.getElementById(`removeBtn_${productId}`);
    const quantityDisplay = document.getElementById(`quantity_${productId}`);
    const addButtonControl = document.getElementById(`addBtn_${productId}`);

    if (cart[productId] && cart[productId].quantity > 0) {
        if (addButton) addButton.style.display = "none";
        if (removeButton) removeButton.style.display = "inline-block";
        if (addButtonControl) {
            addButtonControl.style.display = "inline-block";
            // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É + –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
            addButtonControl.disabled = cart[productId].quantity >= 100;
        }
        if (quantityDisplay) {
            quantityDisplay.style.display = "inline-block";
            quantityDisplay.textContent = cart[productId].quantity;
        }
    } else {
        if (addButton) addButton.style.display = "inline-block";
        if (removeButton) removeButton.style.display = "none";
        if (addButtonControl) addButtonControl.style.display = "none";
        if (quantityDisplay) {
            quantityDisplay.style.display = "none";
        }
    }
}
function displayUserOrders(orders) {
    const ordersContainer = document.getElementById('ordersContainer');
    const noOrdersMessage = document.getElementById('noOrdersMessage');

    if (orders.length === 0) {
        noOrdersMessage.style.display = 'block';
        ordersContainer.style.display = 'none';
    } else {
        noOrdersMessage.style.display = 'none';
        ordersContainer.style.display = 'block';
    }

    ordersContainer.innerHTML = '';

    orders.forEach(order => {
        const itemsList = order.items.map(item => {
            if (item.productId && item.productId.name) {
                return `<li>${item.productId.name} ‚Äî ${item.quantity} —à—Ç. (${item.price} ‚ÇΩ)</li>`;
            } else {
                return `<li>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</li>`;
            }
        }).join('');

        let orderHTML = `
            <div class="order">
                <h3>–ó–∞–∫–∞–∑ ‚Ññ${order._id.slice(0, 8)}</h3>
                <p>–ê–¥—Ä–µ—Å: ${order.address}</p>
                <p>–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: ${new Date(order.createdAt).toLocaleDateString()} ${new Date(order.createdAt).toLocaleTimeString()}</p>
                <p>–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.deliveryTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p>–û–±—â–∞—è —Å—É–º–º–∞: ${order.totalAmount} ‚ÇΩ</p>
        `;

        if (order.additionalInfo) {
            orderHTML += `<p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${order.additionalInfo}</p>`;
        }

        orderHTML += `<ul>${itemsList}</ul></div><hr>`;

        ordersContainer.innerHTML += orderHTML;
    });
}
document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.querySelector('.menu-toggle');
    const navbar = document.querySelector('.navbar');
    const closeMenu = document.querySelector('.close-menu');
    const menuLinks = document.querySelectorAll('.navbar a'); // –í—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –º–µ–Ω—é
    const body = document.body; // –î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

    if (!menuToggle || !navbar || !closeMenu) {
        console.error("–ù–µ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: menuToggle, navbar, closeMenu.");
        return;
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    menuToggle.addEventListener('click', () => {
        navbar.classList.add('active');
        body.classList.add('no-scroll'); // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
    function closeNavMenu() {
        navbar.classList.remove('active');
        body.classList.remove('no-scroll'); // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    }

    closeMenu.addEventListener('click', closeNavMenu);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ª—é–±—É—é —Å—Å—ã–ª–∫—É
    menuLinks.forEach(link => {
        link.addEventListener('click', () => {
            closeNavMenu();
        });
    });
});
function renderCart() {
    const cartItems = document.getElementById("cartItems");
    if (!cartItems) return;

    cartItems.innerHTML = ""; // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let totalAmount = 0;

    for (const productId in cart) {
        const item = cart[productId]; // item = { name, price, quantity }
        const itemTotal = item.price * item.quantity;
        totalAmount += itemTotal;

        const cartItem = document.createElement("div");
        cartItem.className = "cart-item";
        cartItem.setAttribute("data-id", productId); // –ù–∞–∑–æ–≤—ë–º —á–µ—Å—Ç–Ω–æ productId
        cartItem.innerHTML = `
            <div class="item-info">${item.name} - ${itemTotal} ‚ÇΩ</div>
            <div class="cart-buttons">
                <button onclick="decrementItem('${productId}')">-</button>
                <span class="quantity">${item.quantity}</span>
                <button onclick="incrementItem('${productId}', ${item.price})">+</button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    }

    document.getElementById("totalAmount").textContent = `–ò—Ç–æ–≥–æ: ${totalAmount} ‚ÇΩ`;
}



function updateAddToCartButton(productId) {
    const addToCartButton = document.querySelector(`.add-to-cart-button[data-id="${productId}"]`);
    if (addToCartButton) {
        addToCartButton.textContent = "–í –∫–æ—Ä–∑–∏–Ω–µ";
        addToCartButton.disabled = true;
    }
}
async function handleCheckoutFormSubmit(event) {
    event.preventDefault();
    const token = localStorage.getItem("accessToken");

    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    const items = Object.keys(cart).map(productId => ({
        productId: productId,
        quantity: cart[productId].quantity
    }));

    const nameInput = document.getElementById('customerName');
    const addressInput = document.getElementById('customerAddress');
    const additionalInfoInput = document.getElementById('additionalInfo');
    const userId = localStorage.getItem("userId");

    const orderData = {
        userId: userId,
        name: nameInput.value,
        address: addressInput.value,
        additionalInfo: additionalInfoInput.value,
        items: items
    };

    console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞:", orderData);

    try {
        const response = await fetch("https://mobile-site.onrender.com/api/order", {
            method: "POST",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify(orderData)
        });

        console.log("üì• –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);

        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ ${response.status}:`, response.statusText);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.");
            return;
        }

        const responseData = await response.json();
        console.log("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω:", responseData);

        alert("üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
        saveCart();
        window.location.href = "index.html";
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.");
    }
}
document.addEventListener("DOMContentLoaded", () => {
    renderCheckoutCart();
    loadUserData();
    initializeAddToCartButtons();

    const backToShoppingButton = document.getElementById("backToShopping");
    if (backToShoppingButton) {
        backToShoppingButton.addEventListener("click", () => {
            window.location.href = "index.html";
        });
    }

    const checkoutForm = document.getElementById("checkoutForm");
    if (checkoutForm) {
        checkoutForm.addEventListener("submit", handleCheckoutFormSubmit);
    }
});
function initializeAddToCartButtons() {
    const addToCartButtons = document.querySelectorAll(".add-to-cart-button");
    addToCartButtons.forEach(button => {
        const productId = button.getAttribute("data-id");
        const productName = button.getAttribute("data-name");
        const productPrice = parseFloat(button.getAttribute("data-price"));

        button.addEventListener("click", () => {
            addToCart(productId, productName, productPrice);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        const cart = JSON.parse(localStorage.getItem('cart')) || {};
        if (cart[productId]) {
            updateAddToCartButton(productId);
        }
    });
}


function displayOrder(order, container) {
    const itemsList = order.items.map(item => {
        if (item.productId && item.productId.name) {
            return `<li>${item.productId.name} ‚Äî ${item.quantity} —à—Ç. (${item.price} ‚ÇΩ)</li>`;
        } else {
            return `<li>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</li>`;
        }
    }).join('');

    let orderHTML = `
        <div class="order">
            <h3>–ó–∞–∫–∞–∑ ‚Ññ${order._id.slice(0, 8)}</h3>
            <p>–ê–¥—Ä–µ—Å: ${order.address}</p>
            <p>–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è: ${new Date(order.createdAt).toLocaleDateString()} ${new Date(order.createdAt).toLocaleTimeString()}</p>
            <p>–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: ${order.deliveryTime || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
            <p>–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
            <p>–û–±—â–∞—è —Å—É–º–º–∞: ${order.totalAmount} ‚ÇΩ</p>
    `;

    if (order.additionalInfo) {
        orderHTML += `<p>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${order.additionalInfo}</p>`;
    }

    orderHTML += `<ul>${itemsList}</ul></div><hr>`;

    container.innerHTML += orderHTML;
}


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
function addToCart(productId, productName, productPrice) {
    if (!cart[productId]) {
        cart[productId] = {
            name: productName,
            price: productPrice,
            quantity: 1
        };
    } else {
        cart[productId].quantity++;
    }

    localStorage.setItem('cart', JSON.stringify(cart));  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    updateControls(productId);  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    updateCartDisplay();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
}



function updateCartDisplay() {
    const cartItems = document.getElementById("cartItems");
    if (!cartItems) return;

    cartItems.innerHTML = ""; 
    let totalAmount = 0;

    for (const productId in cart) {
        const item = cart[productId]; // item = { name, price, quantity }
        const itemTotal = item.price * item.quantity;
        totalAmount += itemTotal;

        const cartItem = document.createElement("div");
        cartItem.className = "cart-item";
        cartItem.setAttribute("data-id", productId); // –ù–∞–∑–æ–≤—ë–º —á–µ—Å—Ç–Ω–æ productId
        cartItem.innerHTML = `
            <div class="item-info">${item.name} - ${itemTotal} ‚ÇΩ</div>  <!-- –ò—Å–ø–æ–ª—å–∑—É–µ–º item.name –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ -->
            <div class="cart-buttons">
                <button onclick="decrementItem('${productId}')">-</button>
                <span class="quantity">${item.quantity}</span>
                <button onclick="incrementItem('${productId}', ${item.price})">+</button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    }

    document.getElementById("totalAmount").textContent = `–ò—Ç–æ–≥–æ: ${totalAmount} ‚ÇΩ`;
}


function updateQuantityDisplay(productName) {
    const quantityElement = document.getElementById(`quantity_${productName}`);
    if (quantityElement) {
        quantityElement.textContent = cart[productName].quantity;
    }
}
function checkForEmptyCart(productName) {
    const quantity = cart[productName] ? cart[productName].quantity : 0;
    const addButton = document.getElementById(`addButton_${productName}`);
    const controls = document.getElementById(`controls_${productName}`);

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
    if (quantity === 0) {
        if (addButton) addButton.style.display = 'inline-block';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"
        if (controls) controls.style.display = 'none';  // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "+" –∏ "-"
    }
}


// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function incrementItem(productId, price) {
    if (cart[productId]) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç –≤ 100 –µ–¥–∏–Ω–∏—Ü
        if (cart[productId].quantity >= 100) {
            alert('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–∞ (100 —à—Ç.)');
            return;
        }
        cart[productId].quantity += 1;
        saveCart();
        updateControls(productId);
        updateCartDisplay();
    }
}

function decrementItem(productId) {
    if (cart[productId]) {
        cart[productId].quantity -= 1;
        if (cart[productId].quantity <= 0) {
            delete cart[productId]; // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        }
        saveCart();
        updateControls(productId); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        updateCartDisplay(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    }
}


function updateQuantityDisplay(productName) {
    const quantityElement = document.getElementById(`quantity_${productName}`);
    if (quantityElement) {
        quantityElement.textContent = cart[productName].quantity;
    }
}
function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}


//–æ—â–∏—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
document.addEventListener('DOMContentLoaded', () => {
    const clearCartButton = document.getElementById('clear-cart');
    const cartTotal = document.getElementById('totalAmount');

    if (clearCartButton) {
        clearCartButton.addEventListener('click', () => {
            cart = {};  // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            localStorage.removeItem('cart'); // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
            updateCartDisplay();  // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
            if (cartTotal) {
                cartTotal.textContent = '–ò—Ç–æ–≥–æ: 0 ‚ÇΩ';
            }

            const productCards = document.querySelectorAll(".card-dish");
            productCards.forEach(card => {
                const addButton = card.querySelector(".add-button-size");
                const removeButton = card.querySelector(".quantity-control");
                const addButtonControl = card.querySelector(".quantity-size-button");
                const quantityDisplay = card.querySelector(".quantity-display");

                // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if (addButton) addButton.style.display = "inline-block";
                if (removeButton) removeButton.style.display = "none";
                if (addButtonControl) addButtonControl.style.display = "none";
                if (quantityDisplay) {
                    quantityDisplay.textContent = "";
                    quantityDisplay.style.display = "none";
                }
            });
        });
    }
});

document.addEventListener("DOMContentLoaded", () => {
    const toggleButtons = document.querySelectorAll(".toggle-description-btn");

    toggleButtons.forEach((button) => {
        button.addEventListener("click", () => {
            // –ò—â–µ–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            const parent = button.closest(".menu-item"); // –ù–∞—Ö–æ–¥–∏–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            const description = parent.querySelector(".description-collapsible"); // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç

            if (description) {
                description.classList.toggle("expanded"); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–ª–∞—Å—Å "expanded"

                // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button.textContent = description.classList.contains("expanded")
                    ? "–°–≤–µ—Ä–Ω—É—Ç—å"
                    : "–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ";
            } else {
                console.error("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!");
            }
        });
    });
});
document.addEventListener("DOMContentLoaded", () => {
    const token = localStorage.getItem("accessToken");
    const userId = localStorage.getItem("userId");

    if (!token || !userId) {
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
        return;
    }

    fetch(`https://mobile-site.onrender.com/api/user-orders`, { 
    method: "GET",
    headers: {
        "Authorization": `Bearer ${token}`
    }
})
.then(res => res.json())
.then(orders => {
    const container = document.getElementById("ordersContainer");

    if (orders.length === 0) {
        container.innerHTML = "<p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.</p>";
        return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    orders.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑
    displayOrder(orders[0], container);

    // –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const toggleBtn = document.getElementById('toggleHistoryBtn');
    const ordersHistory = document.getElementById('ordersHistory');

    toggleBtn.addEventListener('click', () => {
        if (ordersHistory.style.display === 'none') {
            ordersHistory.style.display = 'block';
            toggleBtn.textContent = '–°–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤';
            ordersHistory.innerHTML = '';
            orders.forEach(order => displayOrder(order, ordersHistory));
        } else {
            ordersHistory.style.display = 'none';
            toggleBtn.textContent = '–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤';
            ordersHistory.innerHTML = '';
            displayOrder(orders[0], ordersHistory); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        }
    });
})
.catch(err => {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
});
})


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
function updateCartDisplay() {
    const cartItems = document.getElementById("cartItems");
    if (!cartItems) return;

    cartItems.innerHTML = "";  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let totalAmount = 0;

    for (const productId in cart) {
        const item = cart[productId];  // item = { name, price, quantity }
        const itemTotal = item.price * item.quantity;
        totalAmount += itemTotal;

        const cartItem = document.createElement("div");
        cartItem.className = "cart-item";
        cartItem.setAttribute("data-id", productId); // –ù–∞–∑–æ–≤—ë–º —á–µ—Å—Ç–Ω–æ productId, –∞ –Ω–µ name
        cartItem.innerHTML = `
            <div class="item-info">${item.name} - ${itemTotal} ‚ÇΩ</div>
            <div class="cart-buttons">
                <button onclick="decrementItem('${productId}')">-</button>
                <span class="quantity">${item.quantity}</span>
                <button onclick="incrementItem('${productId}', ${item.price})">+</button>
            </div>
        `;
        cartItems.appendChild(cartItem);
    }

    document.getElementById("totalAmount").textContent = `–ò—Ç–æ–≥–æ: ${totalAmount} ‚ÇΩ`;

    // –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
    if (Object.keys(cart).length === 0) {
        document.getElementById("cartDropdown").style.display = "none";
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ localStorage
function saveCart() {
    localStorage.setItem('cart', JSON.stringify(cart));
}
function renderCheckoutCart() {
    const cart = JSON.parse(localStorage.getItem('cart')) || {};
    const cartItemsContainer = document.getElementById("cartItems");
    const cartTotalPrice = document.getElementById("cartTotalPrice");

    cartItemsContainer.innerHTML = "";
    let totalPrice = 0;

    for (const productId in cart) {
        const item = cart[productId];
        const itemTotalPrice = item.price * item.quantity;
        totalPrice += itemTotalPrice;

        const cartItemElement = document.createElement("div");
        cartItemElement.className = "cart-item";
        cartItemElement.innerHTML = `
            <span class="item-name">${item.name}</span>
            <span class="item-quantity">${item.quantity} —à—Ç.</span>
            <span class="item-price">${itemTotalPrice.toFixed(2)} ‚ÇΩ</span>
        `;
        cartItemsContainer.appendChild(cartItemElement);
    }

    cartTotalPrice.textContent = totalPrice.toFixed(2) + " ‚ÇΩ";
}
function updateTotal() {
    const cartItems = getCartItems();
    const total = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);
    const totalAmount = document.getElementById('totalAmount');
    if (totalAmount) {
        totalAmount.textContent = `–ò—Ç–æ–≥–æ: ${total} ‚ÇΩ`;
    }
}
function getCartItems() {
    const stored = localStorage.getItem('cartItems');
    if (!stored) return [];
    try {
        const parsed = JSON.parse(stored);
        return Array.isArray(parsed) ? parsed : [];
    } catch (err) {
        return [];
    }
}
// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
function checkout() {
    alert("–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!");
    cart = {};
    updateCartDisplay();
    resetAddToCartButtons();
    saveCart();
    toggleCart();
}

// –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–î–æ–±–∞–≤–∏—Ç—å"
function resetAddToCartButtons() {
    for (const itemName in cart) {
        revertControlsToAddButton(itemName);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", () => {
    loadCartFromLocalStorage();
    const cartModal = document.getElementById("cartModal");
    if (cartModal) cartModal.style.display = "none";
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
function getCookie(name) {
    const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}

async function fetchWithAuth(url, options = {}) {
    let token = localStorage.getItem("accessToken");

    if (!token) {
        console.warn("‚ùå –ù–µ—Ç accessToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        token = await refreshAccessToken();
        if (!token) return null;
    }

    const res = await fetch(url, {
        ...options,
        headers: {
            ...options.headers,
            Authorization: `Bearer ${token}`  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        }
    });

    if (res.status === 401) {
        console.warn("üîÑ –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
        token = await refreshAccessToken();
        if (!token) return res;

        return fetch(url, {
            ...options,
            headers: { ...options.headers, Authorization: `Bearer ${token}` },
        });
    }

    return res;
}
document.addEventListener('DOMContentLoaded', async () => {
    const accessToken = localStorage.getItem('accessToken');  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
});


function getTokenExp(token) {
    try {
        const payload = JSON.parse(atob(token.split(".")[1]));
        return payload.exp;
    } catch (e) {
        return null;
    }
}

async function refreshAccessToken() {
    if (localStorage.getItem("logoutFlag") === "true") {
        console.warn("‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º refresh ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –≤—Ä—É—á–Ω—É—é");

        // –ß–∏—Å—Ç–∏–º –≤—Å—ë –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤—ã—Ö–æ–¥–µ
        localStorage.removeItem("accessToken");
        localStorage.removeItem("userId");
        localStorage.removeItem("username");
        localStorage.removeItem("userData");

        // üí° —Ñ–ª–∞–≥ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
        localStorage.removeItem("logoutFlag");

        return null;
    }

    console.log("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ access-—Ç–æ–∫–µ–Ω–∞...");

    try {
        const response = await fetch("https://mobile-site.onrender.com/refresh", {
            method: "POST",
            credentials: "include"
        });

        if (!response.ok) {
            const data = await response.json();
            console.warn("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", data.message);

            if (data.message.includes("Refresh-—Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫") || data.message.includes("–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")) {
                console.error("‚è≥ Refresh-—Ç–æ–∫–µ–Ω –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥!");
                logout();
            }

            return null;
        }

        const data = await response.json();
        console.log("‚úÖ –ù–æ–≤—ã–π accessToken:", data.accessToken);

        if (data.accessToken) {
            localStorage.setItem("accessToken", data.accessToken);
        } else {
            console.error("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤—ã–π accessToken!");
            return null;
        }

        return data.accessToken;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
        return null;
    }
}



function generateTokens(user, site) {
    const issuedAt = Math.floor(Date.now() / 1000);
    
    const accessToken = jwt.sign(
        { id: user._id, username: user.username, iat: issuedAt },
        JWT_SECRET,
        { expiresIn: "30m" }  // ‚è≥ Access-—Ç–æ–∫–µ–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
    );

    const refreshToken = jwt.sign(
        { id: user._id, username: user.username, site, iat: issuedAt },
        REFRESH_SECRET,
        { expiresIn: "7d" }  // üîÑ Refresh-—Ç–æ–∫–µ–Ω –Ω–∞ 7 –¥–Ω–µ–π
    );

    return { accessToken, refreshToken };
}


function isTokenExpired(token) {
    if (!token) return true; // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏—Å—Ç–µ–∫—à–∏–º

    try {
        const base64 = token.split(".")[1].replace(/-/g, "+").replace(/_/g, "/"); // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º base64
        const payload = JSON.parse(atob(base64)); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
        return (Date.now() / 1000) >= payload.exp; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", e);
        return true;
    }
}



// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
setInterval(async () => {
  if (localStorage.getItem("logoutFlag") === "true") {
    console.warn("‚õî [Interval] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º");
    return;
  }

  const token = localStorage.getItem("accessToken");

  if (!token) {
    console.warn("‚ö†Ô∏è –ù–µ—Ç accessToken, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å...");
    await refreshAccessToken();
    return;
  }

  const exp = getTokenExp(token);
  const now = Math.floor(Date.now() / 1000);

  if (!exp || (exp - now) < 300) {
    console.log("‚è≥ Access-—Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...");
    await refreshAccessToken();
  }
}, 30000);

function editField(field) {
    const input = document.getElementById(field + "Input");
    console.log("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–ª–µ:", field, "–ó–Ω–∞—á–µ–Ω–∏–µ:", input.value);

    if (input.disabled) {
        input.disabled = false;
        input.focus();
    } else {
        fetch("https://mobile-site.onrender.com/account", {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${localStorage.getItem("accessToken")}`
            },
            body: JSON.stringify({ [field]: input.value }) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        })
        .then(response => response.json())
        .then(data => {
            console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
            input.disabled = true;
        })
        .catch(error => console.log("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:", error));
    }
}


async function updateAccountField(data) {
    const token = localStorage.getItem("accessToken");

    try {
        const response = await fetch("https://mobile-site.onrender.com/account", {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Authorization": `Bearer ${token}` // –ë–µ–∑ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å
            },
            body: JSON.stringify(data),
        });

        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö");
        }

        const result = await response.json();
        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", result);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
    }
}


document.getElementById('editName').addEventListener('click', () => {
    document.getElementById('nameInput').disabled = false;
    document.getElementById('saveName').style.display = 'inline-block';
});

document.getElementById('saveName').addEventListener('click', async () => {
    const newName = document.getElementById('nameInput').value;
    await updateAccountField({ name: newName });
    document.getElementById('nameInput').disabled = true;
    document.getElementById('saveName').style.display = 'none';
});

// –ê–∫–∫–∞—É–Ω—Ç: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥
document.getElementById('editCity').addEventListener('click', () => {
    document.getElementById('cityInput').disabled = false;
    document.getElementById('saveCity').style.display = 'inline-block';
});

document.getElementById('saveCity').addEventListener('click', async () => {
    const newCity = document.getElementById('cityInput').value;
    await updateAccountField({ city: newCity });
    document.getElementById('cityInput').disabled = true;
    document.getElementById('saveCity').style.display = 'none';
});
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuthStatus() {
    // üõë 1. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –≤—ã—à–µ–ª
    if (localStorage.getItem("logoutFlag") === "true") {
        console.warn("üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω logoutFlag. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.");
        return;
    }

    // üì¶ 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const token = localStorage.getItem("accessToken");
    const username = localStorage.getItem("username");

    // üß© 3. –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –≤ DOM
    const authButton = document.getElementById("authButton");
    const cabinetButton = document.getElementById("cabinetButton");

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if (!authButton || !cabinetButton) {
        console.warn("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ '–í—Ö–æ–¥' –∏–ª–∏ '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'!");
        return;
    }

    // üß† 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (token && username && !isTokenExpired(token)) {
        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥"
        authButton.style.display = "none";
        authButton.classList.remove("nav-item-visible");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞–±–∏–Ω–µ—Ç"
        cabinetButton.style.display = "flex";
        cabinetButton.classList.add("nav-item-visible");

        // üí° –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        cabinetButton.onclick = () => {
            window.location.href = "/account.html";
        };
    } else {
        console.log("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");

        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞–±–∏–Ω–µ—Ç"
        cabinetButton.style.display = "none";
        cabinetButton.classList.remove("nav-item-visible");

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—Ö–æ–¥"
        authButton.style.display = "flex";
        authButton.classList.add("nav-item-visible");

        // üí° –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ (–µ—Å–ª–∏ –Ω–µ —á–µ—Ä–µ–∑ <a>)
        authButton.onclick = () => {
            window.location.href = "/login.html";
        };

        // üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        sessionStorage.removeItem("authChecked");
    }
}
async function logout() {
    console.log("üö™ –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞...");

    try {
        await fetch("https://mobile-site.onrender.com/logout", {
            method: "POST",
            credentials: "include"
        });

        localStorage.removeItem("accessToken");
        localStorage.removeItem("userId");
        localStorage.removeItem("username");
        localStorage.removeItem("userData"); // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
        localStorage.setItem("logoutFlag", "true"); // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

        console.log("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
    } finally {
        window.location.href = "/index.html";
    }
}


function handleAuthClick() {
    const token = localStorage.getItem('accessToken');
    if (token) {
        window.location.href = 'account.html';
    } else {
        window.location.href = 'login.html';
    }
}

// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
function openCabinet() {
    const token = localStorage.getItem('accessToken');
    const username = localStorage.getItem('username');

   if (!token && !sessionStorage.getItem("authFailed")) {
    alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...");
    window.location.href = "/login.html";
    } else {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
        window.location.href = "/account.html";
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener("load", () => {
  if (typeof checkAuthStatus === "function") {
    console.log("‚úÖ checkAuthStatus –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ window.load");
    checkAuthStatus();
  }
});

// 2. –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ª–∏—á–∏—è DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ "–≤–Ω–∏–∑—É"
document.addEventListener("DOMContentLoaded", function () {
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton && window.location.pathname !== '/account.html') {
        logoutButton.style.display = 'none';
    }
});

// –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–∑–∏–Ω—ã
function calculateBalance() {
    let balance = 0;
    for (const item in cart) {
        balance += cart[item].price * cart[item].quantity;
    }
    return balance;
}
// –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
function goToCheckoutPage() {
    saveCart();
    window.location.href = "checkout.html";
}
document.addEventListener("DOMContentLoaded", () => {
  loadProfileData();
async function loadProfileData() {
  const token = localStorage.getItem("accessToken");
  if (!token) return;

  try {
    const res = await fetch("/account", {
      method: "GET",
      headers: {
        Authorization: `Bearer ${token}`
      }
    });

    if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ HTTP: " + res.status);
    const user = await res.json();

    document.getElementById("nameInput").value = user.name || "";
    document.getElementById("cityInput").value = user.city || "";
    document.getElementById("emailInput").value = user.email || "";
    document.getElementById("usernameDisplay").textContent = user.username || "‚Äî";

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", error);
  }
}

  document.getElementById("editEmail")?.addEventListener("click", () => {
    document.getElementById("emailInput").disabled = false;
    document.getElementById("saveEmail").style.display = "inline-block";
  });

  document.getElementById("saveEmail")?.addEventListener("click", async () => {
    const email = document.getElementById("emailInput").value;
    await updateAccountField({ email });
    document.getElementById("emailInput").disabled = true;
    document.getElementById("saveEmail").style.display = "none";
  });

async function updateAccount(newUsername, newPassword) {
  const token = localStorage.getItem("accessToken");

  const response = await fetch("https://mobile-site.onrender.com/account", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}` // –ë–µ–∑ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å
    },
    body: JSON.stringify({ username: newUsername, password: newPassword }),
  });

  const data = await response.json();
  console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data);
}
function toggleContent(id) {
    const content = document.getElementById(id);
    content.classList.toggle('active');
}
function loadUserData() {
    const customerNameInput = document.getElementById("customerName");
    const customerAddressInput = document.getElementById("customerAddress");
    const additionalInfoInput = document.getElementById("additionalInfo");

    const userData = JSON.parse(localStorage.getItem("userData")) || {};

    if (customerNameInput) customerNameInput.value = userData.name || "";
    if (customerAddressInput) customerAddressInput.value = userData.address || "";
    if (additionalInfoInput) additionalInfoInput.value = userData.additionalInfo || "";
}


// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∫–æ–¥ –≤ `script.js` –∑–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–¥ –µ–≥–æ –≤—ã–∑–æ–≤–æ–º –≤ HTML
document.addEventListener("DOMContentLoaded", function () {
    const authButton = document.getElementById("authButton");
    if (authButton) {
        authButton.onclick = handleAuthClick;
    }
});
async function loadOrders() {
    const token = localStorage.getItem("accessToken");
    if (!token) {
        alert("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
        return;
    }

    try {
        const response = await fetch("https://mobile-site.onrender.com/orders", {
            method: "GET",
            headers: {
                "Authorization": `Bearer ${token}`,
                "Content-Type": "application/json"
            }
        });

        if (!response.ok) {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤");
        }

        const orders = await response.json();
        displayOrders(orders); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤:", error);
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤");
    }
}
document.addEventListener("DOMContentLoaded", function () {
    console.log("JS –∑–∞–≥—Ä—É–∂–µ–Ω!"); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞

    const buttons = document.querySelectorAll(".accordion-button");

    buttons.forEach((button, index) => {
        button.addEventListener("click", function () {
            console.log(`–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ: ${index}`); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–∫–æ–≤

            const content = this.nextElementSibling;

            if (content && content.classList.contains("accordion-content")) {
                console.log("–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç:", content);

                if (content.style.maxHeight) {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º
                    content.style.maxHeight = null;
                    this.classList.remove("active");
                    console.log(`–ö–æ–Ω—Ç–µ–Ω—Ç ${index} –∑–∞–∫—Ä—ã—Ç`);
                } else {
                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    document.querySelectorAll(".accordion-content").forEach((el) => {
                        el.style.maxHeight = null;
                        el.previousElementSibling.classList.remove("active");
                    });

                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –±–ª–æ–∫
                    content.style.maxHeight = content.scrollHeight + "px";
                    this.classList.add("active");
                    console.log(`–ö–æ–Ω—Ç–µ–Ω—Ç ${index} –æ—Ç–∫—Ä—ã—Ç, –≤—ã—Å–æ—Ç–∞: ${content.scrollHeight}px`);
                }
            } else {
                console.log("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!");
            }
        });
    });
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –≤–µ—Ä—Å–∏—é —Ñ—É–Ω–∫—Ü–∏–∏ displayReviews –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –≤—ã—à–µ

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    const cartButton = document.getElementById('cartButton');
    if (cartButton) {
        cartButton.addEventListener('click', toggleCart);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤
    const reviewForm = document.getElementById('reviewForm');
    if (reviewForm) {
        reviewForm.addEventListener('submit', submitReview);
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
    const reviewContainer = document.getElementById('reviewContainer');
    if (reviewContainer) {
        loadReviews();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    updateCart();
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async function loadReviews() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–∑—ã–≤–æ–≤...');
        const response = await fetch('https://mobile-site.onrender.com/api/reviews');
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–∑—ã–≤–æ–≤
        if (Array.isArray(data)) {
            console.log('–î–∞–Ω–Ω—ã–µ —É–∂–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
            allReviews = [...data];
        } else if (data && typeof data === 'object') {
            console.log('–î–∞–Ω–Ω—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
            if (data.reviews && Array.isArray(data.reviews)) {
                allReviews = [...data.reviews];
            } else if (Object.keys(data).length > 0) {
                allReviews = Object.values(data);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –º–∞—Å—Å–∏–≤
        if (!Array.isArray(allReviews)) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –æ—Ç–∑—ã–≤–æ–≤');
            allReviews = [];
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
        allReviews = allReviews.filter(review => review && typeof review === 'object');

        console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:', allReviews);
        
        const reviewContainer = document.getElementById('reviewContainer');
        if (!reviewContainer) {
            console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (allReviews.length === 0) {
            reviewContainer.innerHTML = '<div class="no-reviews">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>';
            return;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é
        currentPage = 1;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        updatePagination();
        displayReviews(1); // –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        updateReviewSummary();
        const starsFilter = document.getElementById("filterStars");
const dateFilter = document.getElementById("filterDate");

if (starsFilter && dateFilter) {
    starsFilter.addEventListener("change", applyFilters);
    dateFilter.addEventListener("change", applyFilters);
}
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
        const reviewContainer = document.getElementById('reviewContainer');
        if (reviewContainer) {
            reviewContainer.innerHTML = '<div class="error-message">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>';
        }
    }
}
function updateReviewSummary() {
    const total = allReviews.length;
    const avg = total > 0 
        ? (allReviews.reduce((sum, r) => sum + parseInt(r.rating || 0), 0) / total).toFixed(1)
        : 0;

    const avgEl = document.getElementById('averageRating');
    const countEl = document.getElementById('totalReviews');

    if (avgEl) avgEl.textContent = ` ${avg} / 5`;
    if (countEl) countEl.textContent = `–û—Ç–∑—ã–≤—ã: ${total}`;
}

function applyFilters() {
    const starValue = document.getElementById("filterStars").value;
    const dateValue = document.getElementById("filterDate").value;
    
    let filtered = [...allReviews];

    if (starValue !== "all") {
        filtered = filtered.filter(r => parseInt(r.rating) === parseInt(starValue));
    }

    filtered.sort((a, b) => {
        const dateA = new Date(a.date);
        const dateB = new Date(b.date);
        return dateValue === "newest" ? dateB - dateA : dateA - dateB;
    });

    displayFilteredReviews(filtered);
}

function displayFilteredReviews(reviews) {
    const container = document.getElementById("reviewContainer");
    container.innerHTML = '';

    if (reviews.length === 0) {
        container.innerHTML = "<p class='no-reviews'>–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</p>";
        return;
    }

    reviews.forEach(review => {
        const el = document.createElement('div');
        el.className = 'review';

        const rating = parseInt(review.rating) || 0;
        const stars = '‚òÖ'.repeat(rating) + '‚òÜ'.repeat(5 - rating);
        const date = new Date(review.date).toLocaleDateString('ru-RU');

        const name = review.displayName || review.username || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

        el.innerHTML = `
          <div class="review-header">
            <span class="review-author">${name}</span>
            <span class="review-date">${date}</span>
          </div>
          <div class="review-rating">${stars}</div>
          <div class="review-text">${review.comment}</div>
        `;
        container.appendChild(el);
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
function updatePagination() {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    if (!allReviews || !Array.isArray(allReviews)) {
        console.error('–ú–∞—Å—Å–∏–≤ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
        return;
    }
    
    const totalPages = Math.ceil(allReviews.length / reviewsPerPage);
    console.log('–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü:', totalPages);
    
    const pagination = document.querySelector('.review-pagination');
    if (!pagination) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    const pageButtons = pagination.querySelectorAll('.page-btn:not([aria-label])');
    pageButtons.forEach(btn => btn.remove());
    
    const prevButton = pagination.querySelector('[aria-label="Previous"]');
    const nextButton = pagination.querySelector('[aria-label="Next"]');
    
    if (!prevButton || !nextButton) {
        console.error('–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    let startPage = Math.max(1, currentPage - 2);
    let endPage = Math.min(totalPages, startPage + 4);
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º startPage, –µ—Å–ª–∏ endPage —É–ø–µ—Ä—Å—è –≤ –º–∞–∫—Å–∏–º—É–º
    if (endPage === totalPages) {
        startPage = Math.max(1, endPage - 4);
    }
    
    // –ï—Å–ª–∏ startPage —Å—Ç–∞–ª 1, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º endPage
    if (startPage === 1) {
        endPage = Math.min(totalPages, 5);
    }
    
    console.log('–î–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü:', { startPage, endPage, currentPage });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    for (let i = startPage; i <= endPage; i++) {
        const pageBtn = document.createElement('button');
        pageBtn.className = `page-btn${currentPage === i ? ' active' : ''}`;
        pageBtn.textContent = i;
        pageBtn.addEventListener('click', () => {
            currentPage = i;
            displayReviews(currentPage);
            updatePagination();
        });
        
        pagination.insertBefore(pageBtn, nextButton);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è"
    prevButton.disabled = currentPage === 1;
    nextButton.disabled = currentPage === totalPages;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è" –∏ "–°–ª–µ–¥—É—é—â–∞—è"
    prevButton.onclick = () => {
        if (currentPage > 1) {
            currentPage--;
            displayReviews(currentPage);
            updatePagination();
        }
    };

    nextButton.onclick = () => {
        if (currentPage < totalPages) {
            currentPage++;
            displayReviews(currentPage);
            updatePagination();
        }
    };
    
    console.log('–ü–∞–≥–∏–Ω–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function displayReviews(page) {
    console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', page);
    
    const reviewContainer = document.getElementById('reviewContainer');
    if (!reviewContainer) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    if (!allReviews || !Array.isArray(allReviews)) {
        console.error('–û—Ç–∑—ã–≤—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', allReviews);
        reviewContainer.innerHTML = '<div class="error-message">–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤</div>';
        return;
    }

    const startIndex = (page - 1) * reviewsPerPage;
    const endIndex = startIndex + reviewsPerPage;
    const pageReviews = allReviews.slice(startIndex, endIndex);
    
    console.log('–û—Ç–∑—ã–≤—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', pageReviews);
    
    reviewContainer.innerHTML = '';
    
    if (pageReviews.length === 0) {
        reviewContainer.innerHTML = '<div class="no-reviews">–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.</div>';
        return;
    }

    try {
        for (let i = 0; i < pageReviews.length; i++) {
            const review = pageReviews[i];
            if (!review) {
                console.warn('–ü—Ä–æ–ø—É—â–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤');
                continue;
            }
            
            const reviewElement = document.createElement('div');
            reviewElement.className = 'review';
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            const rating = review && review.rating ? parseInt(review.rating) : 0;
            const stars = '‚òÖ'.repeat(Math.min(5, Math.max(0, rating))) + '‚òÜ'.repeat(5 - Math.min(5, Math.max(0, rating)));
            const date = review && review.date ? new Date(review.date).toLocaleDateString('ru-RU') : '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
            
            // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
            let displayName;
            if (review.displayName && review.username) {
                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏ –∏–º—è, –∏ –Ω–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞
                displayName = `${review.displayName}(${review.username})`;
            } else if (review.username) {
                // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ç–æ–ª—å–∫–æ –Ω–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                displayName = review.username;
            } else {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
                displayName = '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            }
            
            const comment = review && review.comment ? review.comment : '';
            
            reviewElement.innerHTML = `
                <div class="review-header">
                    <span class="review-author">${displayName}</span>
                    <span class="review-date">${date}</span>
                </div>
                <div class="review-rating">${stars}</div>
                <div class="review-text">${comment}</div>
            `;
            
            reviewContainer.appendChild(reviewElement);
        }
        console.log('–û—Ç–∑—ã–≤—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        reviewContainer.innerHTML = '<div class="error-message">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.</div>';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã
function toggleCart() {
    const cartDropdown = document.getElementById('cartDropdown');
    if (cartDropdown) {
        if (cartDropdown.classList.contains('active')) {
            cartDropdown.classList.remove('active');
        } else {
            cartDropdown.classList.add('active');
        }
    }
}

document.addEventListener("DOMContentLoaded", function() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë
    document.addEventListener('click', function(event) {
        const cartDropdown = document.getElementById('cartDropdown');
        const cartButton = document.getElementById('cartButton');
        
        if (cartDropdown && cartButton) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∫–ª–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            const isQuantityControl = event.target.closest('.cart-buttons');
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –≤–Ω–µ –∫–æ—Ä–∑–∏–Ω—ã, –≤–Ω–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –∏ –Ω–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            if (!cartDropdown.contains(event.target) && 
                !cartButton.contains(event.target) && 
                !isQuantityControl) {
                cartDropdown.classList.remove('active');
            }
        }
    });

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–∑–∏–Ω—ã
    const cartDropdown = document.getElementById('cartDropdown');
    if (cartDropdown) {
        cartDropdown.addEventListener('click', function(event) {
            event.stopPropagation();
        });
    }
});

async function submitReview(event) {
    event.preventDefault();
    
    if (isSubmitting) {
        return;
    }
    
    const submitButton = document.getElementById('submitReview');
    const starRating = document.getElementById('starRating');
    const comment = document.getElementById('comment');
    const displayName = document.getElementById('displayName');
    
    if (!comment.value.trim()) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
        return;
    }
    
    try {
        isSubmitting = true;
        submitButton.disabled = true;
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
        
        const response = await fetch('/api/reviews', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('accessToken')}`
            },
            body: JSON.stringify({
                rating: parseInt(starRating.value),
                comment: comment.value.trim(),
                displayName: displayName.value.trim() || null
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
        }
        
        const result = await response.json();
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        comment.value = '';
        displayName.value = '';
        starRating.value = '5';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        alert('–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã
        await loadReviews();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    } finally {
        isSubmitting = false;
        submitButton.disabled = false;
        submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å';
    }
}
document.addEventListener("DOMContentLoaded", function () {
    const cartDropdown = document.getElementById("cartDropdown");
    if (cartDropdown) {
        cartDropdown.classList.remove("active");
        cartDropdown.style.display = "none";
    }

    const cartButton = document.getElementById("cartButton");
    if (cartButton) {
        cartButton.blur(); // —Å–±—Ä–æ—Å —Ñ–æ–∫—É—Å–∞ —Å –∫–Ω–æ–ø–∫–∏
    }
});


function highlightActiveIcon() {
  const path = window.location.pathname.toLowerCase(); // –≤–∞–∂–Ω–æ!
  console.log("PATH:", path);

  const isHome =
    path.includes("index.html") ||
    path.includes("national%20cuisine") || // –ø—Ä–æ–±–µ–ª—ã –≤ URL
    path.includes("national cuisine") ||   // –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
    path === "/" ||
    path === "";

  const homeIcon = document.getElementById("homeIcon");
  const reviewsIcon = document.getElementById("reviewsIcon");
  const authIcon = document.getElementById("authIcon");
  const cabinetIcon = document.getElementById("cabinetIcon");

  // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤ (—á—Ç–æ–±—ã —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–π, –∫—Ä–æ–º–µ –∫–æ—Ä–∑–∏–Ω—ã)
  [homeIcon, reviewsIcon, authIcon, cabinetIcon].forEach(icon => {
    icon?.classList.remove("active-icon");
  });

  if (isHome) homeIcon?.classList.add("active-icon");
  if (path.includes("review.html")) reviewsIcon?.classList.add("active-icon");
  if (path.includes("login.html")) authIcon?.classList.add("active-icon");
  if (path.includes("profile.html") || path.includes("cabinet.html")) {
    cabinetIcon?.classList.add("active-icon");
  }
}
